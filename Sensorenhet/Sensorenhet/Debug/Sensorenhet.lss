
Sensorenhet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096b  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000822  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036f  00000000  00000000  000013ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000463  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015b  00000000  00000000  00001c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	3b c0       	rjmp	.+118    	; 0xd8 <__vector_24>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	1a d0       	rcall	.+52     	; 0xce <main>
  9a:	5a c0       	rjmp	.+180    	; 0x150 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <pin_init>:
		ADMUX &= (0 << MUX1);
		ADMUX &= (0 << MUX0); // reset mux to ADC0
	}
	else // if not ADC1-3 shift to ADC1
	{
		ADMUX |= (1 << MUX0);
  9e:	80 e5       	ldi	r24, 0x50	; 80
  a0:	84 b9       	out	0x04, r24	; 4
  a2:	80 e1       	ldi	r24, 0x10	; 16
  a4:	81 b9       	out	0x01, r24	; 1
  a6:	87 b9       	out	0x07, r24	; 7
  a8:	81 e8       	ldi	r24, 0x81	; 129
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	08 95       	ret

000000ae <adc_init>:
  ae:	80 e4       	ldi	r24, 0x40	; 64
  b0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  b4:	8f e8       	ldi	r24, 0x8F	; 143
  b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ba:	8f e7       	ldi	r24, 0x7F	; 127
  bc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
  c0:	08 95       	ret

000000c2 <start_adc>:
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret

000000ce <main>:
  ce:	e7 df       	rcall	.-50     	; 0x9e <pin_init>
  d0:	ee df       	rcall	.-36     	; 0xae <adc_init>
  d2:	78 94       	sei
  d4:	f6 df       	rcall	.-20     	; 0xc2 <start_adc>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x8>

000000d8 <__vector_24>:
	}
	
}

ISR(ADC_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0b b6       	in	r0, 0x3b	; 59
  e4:	0f 92       	push	r0
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	//store value in correct place in memory
	//next_input_pin(); //update ADMUX
	PORTD = (1 << PIND7);
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	8b b9       	out	0x0b, r24	; 11
	// update memory for next ad conversion
	start_adc();
 102:	df df       	rcall	.-66     	; 0xc2 <start_adc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f e7       	ldi	r18, 0x7F	; 127
 106:	8a e1       	ldi	r24, 0x1A	; 26
 108:	96 e0       	ldi	r25, 0x06	; 6
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <__vector_24+0x32>
 112:	00 c0       	rjmp	.+0      	; 0x114 <__vector_24+0x3c>
 114:	00 00       	nop
	_delay_ms(100);
	PORTD = (0 << PIND7);
 116:	1b b8       	out	0x0b, r1	; 11
 118:	2f e7       	ldi	r18, 0x7F	; 127
 11a:	8a e1       	ldi	r24, 0x1A	; 26
 11c:	96 e0       	ldi	r25, 0x06	; 6
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <__vector_24+0x46>
 126:	00 c0       	rjmp	.+0      	; 0x128 <__vector_24+0x50>
 128:	00 00       	nop
	_delay_ms(100);
}
 12a:	ff 91       	pop	r31
 12c:	ef 91       	pop	r30
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	7f 91       	pop	r23
 138:	6f 91       	pop	r22
 13a:	5f 91       	pop	r21
 13c:	4f 91       	pop	r20
 13e:	3f 91       	pop	r19
 140:	2f 91       	pop	r18
 142:	0f 90       	pop	r0
 144:	0b be       	out	0x3b, r0	; 59
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
